#+Title: Tour Guiado pelo Emacs
#+Author: Daniel Cordeiro
#+Email: daniel.cordeiro@usp.br
#+STARTUP: inlineimages

* M-x butterfly

#+CAPTION: https://xkcd.com/378/
[[file:./real_programmers_use_emacs.png]]


* O Modo Emacs de ser

** /All hail emacs/

#+BEGIN_QUOTE
"The purpose of a windowing system is to put
some amusing fluff around your one almighty
emacs window."
                    ‚Äì Mark, gnu.emacs.help.
#+END_QUOTE

** Hist√≥ria

- Escrito por Richard Stallman em 1976, como extens√£o do TECO

- Reposit√≥rio de c√≥digo (agora no Git) com mais de 30 anos, 130.000 commits e 600 contribuidores

- Escrito em Emacs Lisp (elisp) (na verdade, ‚âÖ 95% em elisp e 5% em C)
  
** Filosofia

- Na verdade, √© o *GNU* Emacs

- [[https://www.gnu.org/philosophy/philosophy.htm][Filosofia GNU]]: voc√™ deve ter a liberdade de estudar e modificar o c√≥digo que usa

- ... levada ao extremo: voc√™ pode alterar *qualquer* aspecto do editor

- √â o editor de quem quer que tudo seja do seu jeito:
  - extens√≠vel
  - personaliz√°vel
  - auto-documentado

** LISP ?

- Emacs implementa sua pr√≥pria vers√£o de LISP, chamada Emacs Lisp (ou apenas elisp)
  - elisp d√° medo no come√ßo üòâ mas √© legal
  - elisp faz com que o emacs seja um grande processador de s√≠mbolos
  - voc√™ pode inspecionar, substituir ou adicionar c√≥digo (/advice/) em qualquer *qualquer* rotina implementada pelo Emacs

- Rodar o Emacs √© rodar um interpretador de elisp que faz a interface entre c√≥digo elisp e a ABI do sistema operacional

- Quando voc√™ escreve um c√≥digo em elisp voc√™ n√£o est√° escrevendo um /plugin/ que vai rodar de forma isolada e comportada, voc√™ est√° alterando um sistema vivo; um sistema operacional em cima de outro sistema operacional

** Emacs como Sistema Operacional do Dev

#+BEGIN_QUOTE			 .
LILO boot: linux init=/usr/bin/emacs
    ‚Äî Greg Ward
#+END_QUOTE

- Enquanto Vim tem como filosofia ser uma ferramenta de edi√ß√£o (e n√£o s√≥ de escrita de c√≥digo), Emacs tem como filosofia permitir que o usu√°rio desenvolva todas as ferramentas necess√°rias para seu trabalho
  - a discuss√£o sobre as filosofias Vim vs. Emacs √© parte da cultura hacker; veja o artigo da Wikip√©dia [[https://en.wikipedia.org/wiki/Editor_war][Guerra dos Editores]] e uma [[https://youtu.be/3r1z5NDXU3s][s√°tira]] da s√©rie de TV Silicon Valley üòâ

*** Ao ponto em que √© poss√≠vel implementar qualquer coisa nele:

- M-x zone :: descanso de tela
- M-x dunnet :: um jogo de aventura
- M-x tetris :: um clone de Tetris
- M-x doctor :: o psicoterapeuta do Emacs

  Al√©m de:

- v√°rios clientes de e-mail (GNUS, mu4e, notmutch, etc.)
- interface para git (magit)
- window manager (EXWM)
- leitor de PDF (pdf-tools)
- editor de ASCII art (artist-mode)
- etc., etc., etc.

** Extensibilidade

Alguns exemplos de como o emacs p√¥de ser estendido para implementar as mais diversas aplica√ß√µes:

- Emacspeak :: um software de 25+ anos para ajudar quem tem problemas de vis√£o a usar emacs

- Edi√ß√£o remota de arquivos :: TRAMP permite voc√™ editar arquivos em outros computadores como se estivesse editando um arquivo local via SSH, FTP, Docker, rclone, rsync, etc.
  ex: [[/ssh:corinthians:teste.txt]]

- Shell(s) :: Emacs possui um emulador de terminal embutido, um wrapper que permite usar outros shells (como bash) e um pr√≥prio shell turbinado chamado Eshell escrito inteiramente em elisp

- Org mode :: uma aplica√ß√£o de gerenciamento de projetos, TODOs, agenda, programa√ß√£o liter√°ria, editoramento, anota√ß√µes, _apresenta√ß√µes_, etc. √â considerado o melhor app de organiza√ß√£o baseado em texto puro de todos os tempos, motivo de muita gente ter migrado para emacs nos √∫ltimos tempos.

- Calculadora simb√≥lica :: calculadora capaz de realizar √°lgebra simb√≥lica, computa√ß√£o de precis√£o arbitr√°ria, matem√°tica matricial e unit√°ria, etc.

| Aluno  | Intro.Programa√ß√£o | Algoritmos | M√©dia |
|--------+-------------------+------------+-------|
| Daniel |               9.5 |        9.5 |   9.5 |
| Tiago  |                 8 |         10 |     9 |
| Rafael |                 7 |          2 |   4.5 |
#+TBLFM: $4=vmean($2..$3)

- Player de M√∫sica :: Emacs Multimedia System (EMMS)

- e *muito* mais. Emacs continua relevante mesmo em 2022!

* Primeiros passos

** Instalando e Iniciando o Emacs

- O GNU/Emacs √© distribu√≠do para GNU/Linux, BSDs, Windows e MacOS. Veja as instru√ß√µes de instala√ß√£o no [[https://www.gnu.org/software/emacs/][site do projeto]]

- Para iniciar o Emacs, voc√™ deve rodar o comando =emacs=, seguido opcionalmente pelo(s) nome(s) do(s) arquivos que voc√™ quer editar

- As seguintes op√ß√µes de linha de comando podem ser √∫teis:
  | Op√ß√£o  | Descri√ß√£o                                               |
  |--------+---------------------------------------------------------|
  | =--help= | Mostra a ajuda                                          |
  | =-nw=    | For√ßa o Emacs a rodar no modo terminal                  |
  | =-q=     | N√£o l√™ arquivos de inicializa√ß√£o (ex: =init.el=)          |
  | =-Q=     | N√£o l√™ arqs. de inicializa√ß√£o do usu√°rio nem do sistema |

- O emacs pode ser configurado como um servidor. Um cliente, o =emacsclient= reutiliza uma √∫nica inst√¢ncia do Emacs

** Conceitos importantes para entender o Emacs

*** Buffer

A maioria dos editores e IDEs √© /baseada em arquivos/ (mostram texto de um arquivo, gravam texto em um arquivo). No Emacs, todos os arquivos s√£o buffers, mas nem todo buffer √© um arquivo (pode representar um dispositivo de E/S, um outro processo, ou uma √°rea de edi√ß√£o n√£o associada a arquivo, como o =scratch=). Internamente, buffer √© uma estrutura de dados que pode ser manipulada por c√≥digo elisp

*** Janela e /Frame/
Um buffer √© exibido na tela em uma /janela/. No emacs, uma janela √© um dos ladrilhos que formam um frame.

*** /Modeline/, /echo area/ e /minibuffer/

Nesta janela, o /modeline/ √© a linha abaixo que parece com: =1:0: U -~/.emacs.org All Org WK [9/10] GCMH Wrap Narrow=. O /buffer/ √© chamado de =emacs.org= e seu /major mode/ √© o modo =Org=. O modeline pode mostrar todo tipo de informa√ß√£o √∫til (qde. de energia na bateria do notebook, o nome da fun√ß√£o ou classe trabalhada, em qual revis√£o ou /branch/ do controle de vers√£o voc√™ est√° atualmente, etc. O minibuffer est√° na linha abaixo do modeline e mostra erros ou informa√ß√µes gerais.

*** Point e Mark

- /point/ √© sin√¥nimo de cursor (representado geralmente como ‚ñà)
  - o */buffer/ atual* √© aquele que tiver o cursor em um determinado momento

- al√©m de marcar o local onde um caractere ser√° inserido, o /point/ tamb√©m √© parte de uma dupla chamada /point/ e /mark/. Ambos definem uma *regi√£o* (outros editores chamam de sele√ß√£o)

*** /Killing/, /Yanking/ e CUA

- ao definir o CUA (Commum User Access) em 1987, a IBM inaugurou os conceitos hoje universais de *recortar*, *copiar* e *colar*; todo editor implementa o conceito de /clipboard/ e prov√™ atalhos para essas fun√ß√µes: =Ctrl+x= ou =Shift+Delete=; =Ctrl+c= ou =Ctrl+Insert=; e =Ctrl+v= ou =Shift+Insert=, respectivamente

- o Emacs j√° implementava tudo isso antes, mas com outros nomes:

  + recortar :: /killing/ (=C-w= (regi√£o) ou =C-k= (linha))

  + colar :: /yanking/ (=C-y=)

  + copiar :: salvar no /kill ring/ ou s√≥ copiar mesmo :) (=M-y=)

- o =cua-mode= √© um /minor mode/ que habilita as teclas tradicionais
*** =.emacs.d=, =init.el= e =.emacs=

- Um dos passatempos favoritos dos usu√°rios do emacs √© compartilhar com outros usu√°rios as suas configura√ß√µes e c√≥digos que personalizam o editor

- Historicamente, as configura√ß√µes s√£o guardadas em um arquivo texto chamado de =.emacs= . Mas atualmente as configura√ß√µes ficam em =~/.emacs.d/init.el= no Linux e em =%HOME%\init.el= no Windows.

- Emacs 27+ tamb√©m obedece a conven√ß√£o do XDG e permite guardar as configura√ß√µes em =~/.config/emacs/init.el= em sistemas Linux que implementam XDG

- Quando algu√©m fala do arquivo de inicializa√ß√£o do Emacs, est√° falando do seu =init.el= . O =init.el= √© um arquivo com c√≥digo em elisp que ser√° executado no processo de inicializa√ß√£o do Emacs

- Uma dica √© usar um /starter kit/, que turbinam o Emacs com configura√ß√µes e pacotes √∫teis. Algumas recomenda√ß√µes:

  + =.emacs.d= de Steve Purcell :: https://github.com/purcell/emacs.d

  + Prelude de Bozhidar Batzov :: https://github.com/bbatsov/prelude

  + Spacemacs :: https://spacemacs.org/

  + Doom Emacs :: https://github.com/hlissner/doom-emacs

  (os dois √∫ltimos combinam a extensibilidade do Emacs com a edi√ß√£o modal do Vim)

*** /Major modes/ e /minor modes/

- */Major modes/* controlam como um buffer no Emacs se comporta. Se voc√™ quer editar um arquivo com c√≥digo Python e visitar, por exemplo, o arquivo =helloworld.py= o Emacs sabe (usando um registro centralizado que mapeia extens√µes a /major modes/ ou analisando o in√≠cio do arquivo) que ele deve usar o /Python major mode/.

- Todo buffer tem um √∫nico /major mode/.

- O /major mode/ pode ser simples e n√£o oferecer /font locking/ (/syntax highlight/) nem nenhuma outra funcionalidade espec√≠fica. Mas tamb√©m pode oferecer funcionalidades completas de uma IDE moderna, como /font locking/, motor de indenta√ß√£o:

  | Modificador | Nome                                 |
  |-------------+--------------------------------------|
  | =C-=          | Control                              |
  | =M-=          | Meta ("Alt" na maioria dos teclados) |
  | =S-=          | Shift                                |

- Uma _sequ√™ncia de teclas_ √© uma sequ√™ncia de a√ß√µes de teclado ou mouse e uma tecla de t√©rmino que invocam um comando. Se a sequ√™ncia n√£o completa um comando, ent√£o a sequ√™ncia √© um _prefixo_:

Exemplos:
  + =C-d= chama o comando =delete-char= (para invocar o comando, aperte control + d)
  + =C-M-d= chama o comando =down-list=, que coloca o cursor em um n√≠vel mais profundo de par√™nteses (Teste do (Daniel (de Angelis) Cordeiro))

**** Prefixos

Prefixos s√£o subdivis√µes, uma forma de agrupar comandos e de aumentar o n√∫mero poss√≠vel de combina√ß√µes. Por exemplo, o prefixo =C-x= possui dezenas de comandos associados. =C-x= √© um prefixo que voc√™ usar√° o tempo todo:

+ =C-x C-f= chama o comando =find-file= . Voc√™ o executa primeiro mantendo =control= apertado e ent√£o apertando e soltando =x=. O Emacs ir√° mostrar na /echo area/ depois de um tempo a string =C-x-=, com o =-= ao final indicando que ele aguarda um complemento. Em seguida, voc√™ digita =C-f=, segurando =control= enquanto aperta a tecla =f=.
  - voc√™ pode, mas n√£o precisa, manter o =control= apertado enquanto digita =x= e =f=

+ =C-x 8 P= tem dois prefixos: o primeiro =C-x= e o seguindo que √© o =8=. Sozinhos eles n√£o invocam comando. A sequ√™ncia s√≥ √© completa se voc√™ a terminar com =P=

Prefixos parecem complicados, mas o agrupamento faz com que comandos similares estejam agrupados juntos. Por exemplo =C-x r= √© o prefixo para manipula√ß√£o de ret√¢ngulo de strings. Por exemplo, marque a regi√£o entre os caracteres =li= e o =>= das tr√™s linhas e use =C-x r t= para definir uma classe:

  #+begin_src html
    <ul>
      <li>primeiro item</li>
      <li>segundo item</li>
      <li>terceiro item</li>
    </ul>
  #+end_src

- =TAB=, =F1=-=F12=, etc. tamb√©m s√£o teclas que podem fazer parte de sequ√™ncias. Tamb√©m s√£o representadas entre par√™nteses angulares =<tab>=, =<f1>=, etc.

- Se voc√™ estiver travado (por exemplo, come√ßou a digitar o prefixo errado), use o comando =C-g= (que √© o comando de cancelamento de a√ß√µes universal do Emacs)

- O /minor mode/ [[https://github.com/justbur/emacs-which-key][which-key]] pode te ajudar a descobrir quais as teclas de uma determinada sequ√™ncia

**** =M-x=: execute comando extendido

- S√≥ uma pequena parcela dos comandos do emacs est√£o atreladas (/bound/) a teclas. A maioria n√£o est√°, ou porque s√£o pouco usados, ou porque voc√™ pegou as teclas atreladas a um comando e atrelou a outro, deixando o primeiro sem sem teclas (/unbounded/)

- Por isso, √© comum que voc√™ invoque os comandos menos usados pelo nome. Para isso, usamos o =M-x= (pronunciado /mex/, M x ou meta x). Um prompt no minibuffer permitir√° voc√™ digitar o nome do comando.

  + por exemplo: =M-x lunar-phases=

- Emacs tem um sistema de auto-comple√ß√£o associado a tecla =TAB=. Use o =TAB= para reduzir a lista de sugest√µes de comandos

**** Descobrindo e lembrando das teclas

- Se voc√™ n√£o se lembrar exatamente de um comando, o Emacs pode ajudar

- Se voc√™ s√≥ se lembrar do in√≠cio da sequ√™ncia, mas n√£o do fim, adicione =C-h= para ver uma lista das op√ß√µes. Ex: =C-x 8 C-h=

- Confie no sistema de auto-documenta√ß√£o do Emacs!

* Configura√ß√£o do Emacs

- Um t√≥pico para mais de uma aula e muito, *muito* divertido üòâ

- Voc√™ pode:

  + usar a interface de configura√ß√£o do Emacs: =M-x customize=; especialmente recomendado para iniciantes

  + escrever c√≥digo em elisp no seu arquivo de inicializa√ß√£o [[file:~/.emacs.d/init.el][init.el]]

- Na verdade, voc√™ pode executar c√≥digo elisp em qualquer lugar e a qualquer momento no seu emacs e ele pode alterar o funcionamento do seu emacs com =M-x eval-buffer= ou =M-x eval-region=:

    #+BEGIN_SRC emacs-lisp
    (defun unfill-paragraph (&optional region)
	"Takes a multi-line paragraph and makes it into a single line of text."
	(interactive (progn
		       (barf-if-buffer-read-only)
		       (list t)))
	(let ((fill-column (point-max)))
	  (fill-paragraph nil region)))
    (bind-key "M-Q" 'unfill-paragraph)
  #+END_SRC

Exemplo:

Um par√°grafo multilinhas
pode se tornar um par√°grafo
monolinha 

** O Gerenciador de Pacotes

- Desde a vers√£o 24, Emacs tem seu pr√≥prio gerenciador de pacotes

- H√° v√°rios reposit√≥rios de pacotes, os mais importantes s√£o o ELPA (/Emacs Lisp Package Archive,/ oficial, com c√≥digo GNU), o [[https://melpa.org/][MELPA]] (gerenciado pela comunidade, muito mais completo)

- =M-x package-list-packages=

** Temas de Cores

- Se voc√™ n√£o gostar do tema de cores padr√£o do Emacs, basta usar outro

- =M-x customize-themes=

- H√° *muitos* temas de cores dispon√≠veis no MELPA, a maioria tem o nome terminando com =-theme= 

- Eu uso o pacote base16-theme com o tema base16-onedark:
  #+begin_src emacs-lisp
    (load-theme 'base16-onedark)
  #+end_src

* Conseguindo ajuda

- O Emacs √© um editor com um sistema sofisticado de auto-documenta√ß√£o

- Aprender como encontrar ajuda √© essencial

** O manual Info

- O pr√≥prio manual do Emacs foi escrito usando TeXinfo (se voc√™ j√° usou o comando =info= no Linux, j√° interagiu com um visualizador de TeXinfo)

- =M-x info= ou =C-h i=

- Teclas para navegar no manual:

  | Tecla | Finalidade                                |
  |-------+-------------------------------------------|
  | =[= e =]= | n√≥ *Anterior* ou o *pr√≥ximo* n√≥               |
  | =l= e =r= | *Voltar* ou *Avan√ßar* no hist√≥rico            |
  | =n= e =p= | *Pr√≥ximo* n√≥ ou o *Anterior* no mesmo n√≠vel   |
  | =u=     | Sobe um n√≠vel para um n√≥ pai              |
  | =SPC=   | Avan√ßa uma p√°gina da tela do manual       |
  | =TAB=   | Percorre os links e refer√™ncias-cruzadas  |
  | =RET=   | Abre o link ativo                         |
  | =m=     | Abre menu com os nomes dos itens e o abre |
  | =q=     | Fecha o navegador do manual               |


** Apropos

- Permite procurar, com express√µes regulares, por um comando

- =M-x apropos= ou =C-h a=

- Ex: voc√™ est√° procurando por um comando que conte palavras e sabe que ele termina com =-words= mas n√£o lembra o come√ßo
  - procure com =C-h a -words$=

- Apropos mostra o nome do comando, a sequ√™ncia de teclas associada ao comando (se tiver) e sua descri√ß√£o


** O sistema de descri√ß√£o

- Um conjunto de comandos que permite descrever o estado atual do interpretador de elisp do Emacs

- Isso significa que ele descreve comandos interativos, fun√ß√µes elisp, etc. Descreve toda faceta do Emacs, seja ela implementada em elisp ou C

N√£o h√° "segredos" no Emacs

- =M-x describe-mode= ou =C-h m= :: mostra a documenta√ß√£o para o /major mode/ (e eventuais /minor modes/ habilitados)

- =M-x describe-function= ou =C-h f= :: descreve uma fun√ß√£o elisp. Se a fun√ß√£o for interativa, √© um dos comandos do Emacs. Ex: =C-h f org-tree-slide-mode=

- =M-x describe-variable= ou =C-h v= :: descreve uma vari√°vel. Ex: =C-h v emacs-version=

- =M-x describe-key= ou =C-h k= :: descreve o que uma sequ√™ncia de teclas faz. Ex: =C-h k C-x C-s=

- =M-x describe-bindings= ou o /minor mode/ =which-key= 

* Emacs em 2022

- Emacs n√£o √© *apenas* um editor, mas um ambiente de produtividade que voc√™ pode personalizar usando elisp

** Coisas √∫nicas que o Emacs faz:
  + Permite acompanhar projetos, tarefas e compromissos com [[https://orgmode.org/][Org Mode]]
  + Gerencia seus e-mails e chats com uma variedade de pacotes ([[https://www.djcbsoftware.nl/code/mu/mu4e.html][mu4e]], ERC, [[https://github.com/zevlg/telega.el][telega.el]])
  + Acessa servidores remotos com o TRAMP
  + Serve como um ambiente completo de janelas com EXWM

** Mas tamb√©m tem:
  + edi√ß√£o modal √† moda do Vim com [[https://github.com/emacs-evil/evil][evil-mode]]
  + Funcionalidades completas de IDEs para muitas linguagens com [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]] e [[https://github.com/emacs-lsp/dap-mode][dap-mode]]
  + Uma das melhores interfaces para Git que existe (acredite!): [[https://magit.vc/][Magit]]
  + Integra√ß√£o com compiladores, test runners, linters, etc.

** O poder do Org Mode

- Voc√™ pode usar Org para fazer suas apresenta√ß√µes

- Voc√™ pode usar Org para escrever textos
  
- Voc√™ pode usar Org para gerenciar seus TODOs

*** Mas voc√™ tamb√©m pode usar para fazer programa√ß√£o liter√°ria

- =C-c C-c= aciona o Org Babel para executar os blocos de c√≥digo

  #+begin_src shell
    for i in /tmp/*; do echo $i; done
  #+end_src

#+begin_src C
  #include <stdio.h>
  int main() {
     printf("Hello, World!");
     return 0;
  }
#+end_src

#+NAME: somedata
   | nb    | sqr | noise |
   |-------+-----+-------|
   | zero  |   0 |  0.23 |
   | one   |   1 |  1.31 |
   | two   |   4 |  4.61 |
   | three |   9 | 19.05 |
   | four  |  16 | 16.55 |

#+name: c-table
   #+header: :exports results
   #+begin_src C++ :results output :var somedata=somedata :includes "<string.h> <stdio.h> <stdlib.h>"
     int main()
      {
        for(int j=0; j<somedata_cols; j++) { printf("%s  ", somedata_header[j]); };
        printf("\n");
        for (int i=0; i<somedata_rows; i++) {
          printf ("%2d %7s ", i, somedata_h(i,"nb"));
          for (int j=1; j<somedata_cols; j++) {
            const char* cell = somedata[i][j];
            printf ("%5s %5g ", cell, 1000*atof(cell));
          }
          printf("\n");
        }
        return 0;
      }
   #+end_src

* Veja tamb√©m

- Emacs Tutorial: =C-h t=

- Manual do Emacs: =C-h r= ou https://www.gnu.org/software/emacs/manual/emacs.html

- [[https://www.gnu.org/software/emacs/refcards/index.html][Reference Cards]] do Emacs, incluindo um em [[https://www.gnu.org/software/emacs/refcards/pdf/pt-br-refcard.pdf][Portugu√™s]]. Tamb√©m um [[https://www.ime.usp.br/~rbrito/texts/emacs.html][Resumo de Comandos do Emacs]]

- Mickey Petersen. [[https://www.masteringemacs.org/][Mastering Emacs]], ePUB (material no qual essa aula se baseou)

- S√©rie de textos de Dr. Peter Prevos (um engenheiro civil que usa Emacs) sobre ser ``[[https://lucidmanager.org/categories/productivity/][More Productive with Emacs]]''

- P√°gina do projeto Org Mode https://orgmode.org/ e o [[https://www.ime.usp.br/~gubi/orgmode/basico/GuiaRapido.html][Guia R√°pido para o uso do org-mode]] em Portugu√™s

- Os v√≠deos (em ingl√™s) do canal System Crafters: https://www.youtube.com/c/SystemCrafters/, come√ßando pelo [[https://youtu.be/48JlgiBpw_I][The Absolute Beginner's Guide to Emacs]]

- O agregador de blogs sobre Emacs [[https://planet.emacsen.org/][Planet Emacs]]
